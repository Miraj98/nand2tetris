// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux4Way (in=load, sel=address[0..1], a=a, b=b, c=c, d=d);
    DMux (in=a, sel=address[2], a=ram1, b=ram5);
    DMux (in=b, sel=address[2], a=ram2, b=ram6);
    DMux (in=c, sel=address[2], a=ram3, b=ram7);
    DMux (in=d, sel=address[2], a=ram4, b=ram8);

    RAM8 (in=in, load=ram1, address=address[3..5], out=out1);
    RAM8 (in=in, load=ram2, address=address[3..5], out=out2);
    RAM8 (in=in, load=ram3, address=address[3..5], out=out3);
    RAM8 (in=in, load=ram4, address=address[3..5], out=out4);
    RAM8 (in=in, load=ram5, address=address[3..5], out=out5);
    RAM8 (in=in, load=ram6, address=address[3..5], out=out6);
    RAM8 (in=in, load=ram7, address=address[3..5], out=out7);
    RAM8 (in=in, load=ram8, address=address[3..5], out=out8);
    
    Mux4Way16 (a=out1, b=out2, c=out3, d=out4, sel=address[0..1], out=lastout1);
    Mux4Way16 (a=out5, b=out6, c=out7, d=out8, sel=address[0..1], out=lastout2);
    Mux16 (a=lastout1, b=lastout2, sel=address[2], out=out);
}
